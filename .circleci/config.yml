version: 2.1

orbs:
  email: cinotify/email@1.2.1
  #

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID
    steps:
      - run:
          name: Destroy environment
          when: on_fail
          command: |
            echo "${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  notify_on_failure:
      steps:
        - email/send:
            body: 'FAILURE'
            subject: CircleCI job started
            to: amr.alaa.ismail@gmail.com

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run frontend test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force
            # npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --force
            # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - run:
      #     command: |
      #       yum -y update
      #       yum -y install tar
      #       yum -y install gzip
      # - run:
      #     name: Ensure back-end infrastructure exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/backend.yml \
      #         --tags project=udaPeople \
      #         --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      # - run:
      #     name: Ensure front-end infrastructure exist
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file .circleci/files/frontend.yml \
      #         --tags project=udaPeople \
      #         --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
      #         --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" 
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "1.2.3.4" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
          # command: |
          #   aws ec2 describe-instances --instance-ids $instance_id \
          #   --query 'Reservations[*]. Instances[*]. PublicIpAddress' \
          #   --output text >> .circleci/ansible/inventory.txt
          #   cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:23:d1:28:08:58:2b:9f:48:cc:91:ea:21:fe:94:ab:42:6e:2f:81"]
      - run:
          name: Install dependencies
          command: |
            apk add gzip openssh-client ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            pwd
            ll
          # command: |
          #   cd project/.circleci/ansible/
          #   cat inventory.txt
          #   ansible-playbook -i inventory.txt configure-server.yml

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      # - run:
      #     name: Send migration status to kvdb.io OR memstash.io
      #     command: |   
      #         if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #         then
      #             curl https://kvdb.io/LwUPRqMeQbxx4hCxMjjPDQ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #         fi

  
  deploy-frontend:
    docker:
      - image: doctrine/nodejs-aws-cli
    steps:
      - checkout
      # no need to install dependencies as all are included in the image
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --instance-ids $instance_id --query 'Reservations[*]. Instances[*]. PublicIpAddress')
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["0d:23:d1:28:08:58:2b:9f:48:cc:91:ea:21:fe:94:ab:42:6e:2f:81"]
      - run:
          name: Install dependencies
          command: |
            apk add gzip openssh-client ansible npm
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            cd ~/project/backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -czvf artifact.tar.gz .
            cd ~/project/.circleci/ansible/
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

  smoke-test:
    docker:
      - image: amazon/aws-cli
    steps:
      # - checkout
      # - run:
      #     name: Install dependencies
      #     command: |
      #       # your code here
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      # - run:
      #     name: Backend smoke test.
      #     command: |
      #       export BACKEND_PUBLIC_IP=$(aws ec2 describe-instances --region us-east-1 --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
      #       export API_URL="http://${BACKEND_PUBLIC_IP}:3030"
      #       echo "${API_URL}"
      #       if curl "${API_URL}/api/status" | grep "ok"
      #       then
      #           return 0
      #       else
      #           return 1
      #       fi
      # - run:
      #     name: Frontend smoke test.
      #     command: |
      #       URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
      #       echo ${URL} 
      #       if curl -s ${URL} | grep "Welcome"
      #       then
      #           # Change this to 0 after the job fails
      #         return 1
      #       else
      #         return 1
      #       fi
      # - notify_on_failure
      - destroy_environment

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [configure-infrastructure]
      # - deploy-backend:
      #     requires: [configure-infrastructure]
      # - smoke-test:
      #     requires: [deploy-backend]
